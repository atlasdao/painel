generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String               @id @default(uuid())
  email                   String               @unique
  username                String               @unique
  password                String
  apiKey                  String?              @unique
  role                    UserRole             @default(USER)
  isActive                Boolean              @default(true)
  passwordResetCode       String?
  passwordResetExpires    DateTime?
  passwordResetAttempts   Int                  @default(0)
  isAccountValidated      Boolean              @default(false)
  validationPaymentId     String?
  validatedAt             DateTime?
  verifiedTaxNumber       String?
  commerceMode            Boolean              @default(false)
  commerceModeActivatedAt DateTime?
  paymentLinksEnabled     Boolean              @default(false)
  apiDailyLimit           Float                @default(10000)
  apiMonthlyLimit         Float                @default(50000)
  profilePicture          String?
  defaultWalletAddress    String?
  defaultWalletType       String?              @default("LIQUID")
  pixKey                  String?
  pixKeyType              PixKeyType?
  twoFactorEnabled        Boolean              @default(false)
  twoFactorSecret         String?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  lastLoginAt             DateTime?
  botExternalId           String?
  externalUserId          String?              @unique
  apiKeyRequests          ApiKeyRequest[]
  auditLogs               AuditLog[]
  commerceApplication     CommerceApplication?
  couponUsages            CouponUsage[]
  levelHistory            LevelHistory[]
  paymentLinks            PaymentLink[]
  transactions            Transaction[]
  userLevel               UserLevel?
  limits                  UserLimit?
  reputation              UserReputation?
  withdrawalRequests      WithdrawalRequest[]

  @@index([email])
  @@index([username])
  @@index([apiKey])
  @@index([role])
  @@index([passwordResetCode])
  @@index([verifiedTaxNumber])
  @@index([botExternalId])
}

model Transaction {
  id            String            @id @default(uuid())
  userId        String
  type          TransactionType
  status        TransactionStatus
  amount        Float
  currency      String            @default("BRL")
  pixKey        String?
  pixKeyType    PixKeyType?
  externalId    String?           @unique
  description   String?
  metadata      String?
  errorMessage  String?
  processedAt   DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  auditLogs     AuditLog[]
  user          User              @relation(fields: [userId], references: [id])
  webhookEvents WebhookEvent[]

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([externalId])
  @@index([createdAt])
}

model WebhookEvent {
  id            String             @id @default(uuid())
  transactionId String
  url           String
  method        String             @default("POST")
  headers       String?
  payload       String
  status        WebhookEventStatus @default(PENDING)
  attempts      Int                @default(0)
  maxAttempts   Int                @default(3)
  lastAttemptAt DateTime?
  responseCode  Int?
  responseBody  String?
  nextRetryAt   DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  transaction   Transaction        @relation(fields: [transactionId], references: [id])

  @@index([transactionId])
  @@index([status])
  @@index([nextRetryAt])
}

model AuditLog {
  id            String       @id @default(uuid())
  userId        String?
  transactionId String?
  action        String
  resource      String
  resourceId    String?
  ipAddress     String?
  userAgent     String?
  requestBody   String?
  responseBody  String?
  statusCode    Int?
  duration      Int?
  createdAt     DateTime     @default(now())
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([transactionId])
  @@index([action])
  @@index([createdAt])
}

model RateLimit {
  id        String   @id @default(uuid())
  key       String   @unique
  type      String
  requests  Int      @default(0)
  window    String
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([resetAt])
}

model UserLimit {
  id                   String   @id @default(uuid())
  userId               String   @unique
  dailyDepositLimit    Float    @default(500.00)
  dailyWithdrawLimit   Float    @default(500.00)
  dailyTransferLimit   Float    @default(500.00)
  maxDepositPerTx      Float    @default(5000.00)
  maxWithdrawPerTx     Float    @default(5000.00)
  maxTransferPerTx     Float    @default(5000.00)
  monthlyDepositLimit  Float    @default(50000.00)
  monthlyWithdrawLimit Float    @default(50000.00)
  monthlyTransferLimit Float    @default(50000.00)
  isFirstDay           Boolean  @default(true)
  isKycVerified        Boolean  @default(false)
  isHighRiskUser       Boolean  @default(false)
  lastLimitUpdate      DateTime @default(now())
  updatedByAdminId     String?
  notes                String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isFirstDay])
  @@index([isKycVerified])
}

model ApiKeyRequest {
  id              String              @id @default(uuid())
  userId          String
  usageReason     String
  serviceUrl      String
  estimatedVolume String
  usageType       ApiKeyUsageType     @default(SINGLE_CPF)
  status          ApiKeyRequestStatus @default(PENDING)
  approvedBy      String?
  approvalNotes   String?
  approvedAt      DateTime?
  rejectedAt      DateTime?
  generatedApiKey String?             @unique
  apiKeyExpiresAt DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model PaymentLink {
  id                String    @id @default(uuid())
  userId            String
  shortCode         String    @unique
  amount            Float?
  isCustomAmount    Boolean   @default(false)
  minAmount         Float?
  maxAmount         Float?
  walletAddress     String
  description       String?
  currentQrCode     String?
  qrCodeGeneratedAt DateTime?
  lastPaymentId     String?
  totalPayments     Int       @default(0)
  totalAmount       Float     @default(0)
  isActive          Boolean   @default(true)
  expiresAt         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([shortCode])
  @@index([userId])
  @@index([isActive])
}

model UserReputation {
  id                  String   @id @default(uuid())
  userId              String   @unique
  totalApprovedVolume Float    @default(0)
  totalApprovedCount  Int      @default(0)
  totalRejectedCount  Int      @default(0)
  reputationScore     Float    @default(0)
  currentDailyLimit   Float    @default(6000)
  nextLimitThreshold  Float    @default(50000)
  limitTier           Int      @default(1)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([reputationScore])
}

model WithdrawalRequest {
  id             String           @id @default(uuid())
  userId         String
  amount         Float
  method         WithdrawalMethod
  pixKey         String?
  pixKeyType     PixKeyType?
  liquidAddress  String?
  fee            Float
  netAmount      Float
  status         WithdrawalStatus @default(PENDING)
  statusReason   String?
  requestedAt    DateTime         @default(now())
  scheduledFor   DateTime
  processedAt    DateTime?
  approvedBy     String?
  approvedAt     DateTime?
  rejectedBy     String?
  rejectedAt     DateTime?
  adminNotes     String?
  coldwalletTxId String?
  cpfCnpj        String?
  fullName       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  couponUsages   CouponUsage[]
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([scheduledFor])
  @@index([method])
}

model SystemSettings {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
}

model DiscountCoupon {
  id                 String        @id @default(uuid())
  code               String        @unique
  description        String?
  discountPercentage Float
  maxUses            Int?
  maxUsesPerUser     Int           @default(1)
  currentUses        Int           @default(0)
  validFrom          DateTime      @default(now())
  validUntil         DateTime?
  minAmount          Float?
  maxAmount          Float?
  allowedMethods     String[]      @default(["PIX", "DEPIX"])
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  createdBy          String?
  usages             CouponUsage[]

  @@index([code])
  @@index([isActive])
  @@index([validUntil])
}

model CouponUsage {
  id                  String             @id @default(uuid())
  couponId            String
  userId              String
  withdrawalRequestId String?
  discountApplied     Float
  originalFee         Float
  finalFee            Float
  usedAt              DateTime           @default(now())
  coupon              DiscountCoupon     @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  withdrawalRequest   WithdrawalRequest? @relation(fields: [withdrawalRequestId], references: [id])

  @@unique([couponId, userId, withdrawalRequestId])
  @@index([couponId])
  @@index([userId])
  @@index([usedAt])
}

model CommerceApplication {
  id                  String                    @id @default(uuid())
  userId              String                    @unique
  businessName        String
  businessType        String
  monthlyVolume       String
  productDescription  String
  targetAudience      String
  hasPhysicalStore    String
  socialMedia         String
  businessObjective   String
  status              CommerceApplicationStatus @default(PENDING)
  depositAmount       Float?                    @default(100000)
  depositPaid         Boolean                   @default(false)
  depositPaidAt       DateTime?
  depositRefunded     Boolean                   @default(false)
  depositRefundedAt   DateTime?
  reviewedBy          String?
  reviewedAt          DateTime?
  reviewNotes         String?
  rejectionReason     String?
  transactionCount    Int                       @default(0)
  commerceActivatedAt DateTime?
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  user                User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([createdAt])
}

model UserLevel {
  id                    String    @id @default(uuid())
  userId                String    @unique
  level                 Int       @default(0)
  dailyLimitBrl         Decimal   @default(0) @db.Decimal(10, 2)
  dailyUsedBrl          Decimal   @default(0) @db.Decimal(10, 2)
  totalVolumeBrl        Decimal?  @default(0) @db.Decimal(12, 2)
  completedTransactions Int       @default(0)
  lastLimitReset        DateTime  @default(now())
  lastLevelUpgrade      DateTime?
  syncedFromBot         Boolean   @default(false)
  botExternalId         String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([level])
  @@index([botExternalId])
  @@index([lastLimitReset])
  @@index([dailyLimitBrl])
}

model LevelConfig {
  level                     Int      @id
  name                      String
  dailyLimitBrl             Decimal  @db.Decimal(10, 2)
  maxPerTransactionBrl      Decimal? @db.Decimal(10, 2)
  minTransactionsForUpgrade Int
  minVolumeForUpgrade       Decimal  @db.Decimal(12, 2)
  description               String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@index([level])
}

model LevelHistory {
  id        String   @id @default(uuid())
  userId    String
  oldLevel  Int
  newLevel  Int
  oldLimit  Decimal  @db.Decimal(10, 2)
  newLimit  Decimal  @db.Decimal(10, 2)
  reason    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([newLevel])
}

enum UserRole {
  USER
  ADMIN
}

enum CommerceApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  DEPOSIT_PENDING
  ACTIVE
}

enum ApiKeyRequestStatus {
  PENDING
  APPROVED
  REJECTED
  REVOKED
}

enum ApiKeyUsageType {
  SINGLE_CPF
  MULTIPLE_CPF
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  TRANSFER
  REFUND
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
}

enum PixKeyType {
  CPF
  CNPJ
  EMAIL
  PHONE
  RANDOM_KEY
}

enum WebhookEventStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum WithdrawalMethod {
  PIX
  DEPIX
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
